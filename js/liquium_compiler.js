"use strict";

var async = require('async');
var ethConnector = require('ethconnector');
var path = require('path');
var _ = require('lodash');
var fs = require("fs");

exports.compile = compile;

function compile(opts, fileName, cb) {
    var organizationAbi;
    var organizationByteCode;
    var singleChoiceAbi;
    var singleChoiceByteCode;
    var delegateStatusFactoryAbi;
    var delegateStatusFactoryByteCode;
    var delegateStatusAbi;
    var delegateStatusByteCode;
    var compilationResult = {};
    var src;
    return async.series([
        function(cb) {
            ethConnector.loadSol(path.join(__dirname, "../Organization.sol"), function(err, _src) {
                if (err) return cb(err);
                src = _src;
                cb();
            });
        },
        function(cb) {
            ethConnector.applyConstants(src, opts, function(err, _src) {
                if (err) return cb(err);
                src = _src;
                cb();
            });
        },
        function(cb) {
            compilationResult.srcVault = src;
            ethConnector.compile(src, function(err, result) {
                if (err) return cb(err);
                compilationResult = _.extend(result, compilationResult);
                cb();
            });
        },
        function(cb) {
            organizationAbi = JSON.parse(compilationResult.Organization.interface);
            organizationByteCode = compilationResult.Organization.bytecode;
            delegateStatusFactoryAbi = JSON.parse(compilationResult.DelegateStatusFactory.interface);
            delegateStatusFactoryByteCode = compilationResult.DelegateStatusFactory.bytecode;
            delegateStatusAbi = JSON.parse(compilationResult.DelegateStatus.interface);
            delegateStatusByteCode = compilationResult.DelegateStatus.bytecode;
            ethConnector.loadSol(path.join(__dirname, "../SingleChoice.sol"), function(err, _src) {
                if (err) return cb(err);
                src = _src;
                cb();
            });
        },
        function(cb) {
            compilationResult.srcSingleChoice = src;
            ethConnector.compile(src, function(err, result) {
                if (err) return cb(err);
                compilationResult = _.extend(result, compilationResult);
                cb();
            });
        },
        function(cb) {
            singleChoiceAbi = JSON.parse(compilationResult.SingleChoice.interface);
            singleChoiceByteCode = compilationResult.SingleChoice.bytecode;

            var S = "";
            S += "\"use strict\";\n";
            S += "/* This is an autogenerated file. DO NOT EDIT MANUALLY */\n";
            S += "exports.organizationAbi = "+JSON.stringify(organizationAbi) +";\n";
            S += "exports.organizationByteCode = \"0x"+organizationByteCode + "\";\n";
            S += "exports.delegateStatusFactoryAbi = "+JSON.stringify(delegateStatusFactoryAbi) +";\n";
            S += "exports.delegateStatusFactoryByteCode = \"0x"+delegateStatusFactoryByteCode + "\";\n";
            S += "exports.delegateStatusAbi = "+JSON.stringify(delegateStatusAbi) +";\n";
            S += "exports.delegateStatusByteCode = \"0x"+delegateStatusByteCode + "\";\n";
            S += "exports.singleChoiceAbi = "+JSON.stringify(singleChoiceAbi) +";\n";
            S += "exports.singleChoiceByteCode = \"0x"+singleChoiceByteCode +"\";\n";
            fs.writeFile(fileName, S, cb);
        }
    ], cb);
}
